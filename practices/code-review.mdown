# Code Review

Code review is a process by which developers review and evaluate each otherâ€™s code. The goal is not only to make the project better, and faster but also to spread knowledge. Code review gives a developer a chance to read more code and learn from others. 

## What is a reviewer looking for?

1. Understand what the requirement behind the commit pull request.
2. Code is readable without the help of the author.
3. All tests are passing.
4. Spec coverage for the part which is being reviewed.
5. Documentation for new methods. Yard for Ruby.
6. Check if standard styling for the language is followed.
7. Check if SOLID.
8. Check for logical errors.
9. Check for old syntaxes. 


## How to communicate?

1. Accept that many programming decisions are opinions. Discuss tradeoffs, which you prefer, and reach a resolution quickly.
2. Ask questions; don't make demands. ("What do you think about naming this :user_id?")
3. Ask for clarification. ("I didn't understand. Can you clarify?")
4. Be explicit. Remember people don't always understand your intentions online.
5. Keep it real. If emoji, animated gifs, or humor aren't you, don't force them. If they are, use them with aplomb.
6. Talk synchronously (e.g. chat, screensharing, in person) if there are too many "I didn't understand" or "Alternative solution:" comments. Post a follow-up comment summarizing the discussion.
7. If discussions turn too philosophical or academic, move the discussion offline to a regular Friday afternoon technique discussion. In the meantime, let the author make the final decision on alternative implementations.


## What not to do?

1. Dont assume that the programmer know more or less than you.
2. Be receptive. If you find a new way of doing something, talk to the programmer and find out what that is.
3. Dont ask the programmer to fix something which is outside the scope of his story.